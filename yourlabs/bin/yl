#!/usr/bin/env python
import os

from django.core import management

import yourlabs

_commands = None


def new_get_commands():
    """
    Override django's get_commands which gives yourlabs priority over django.
    """
    global _commands
    if _commands is None:
        path = os.path.realpath(os.path.join(management.__path__[0]))
        _commands = (dict([(name, 'django.core') for name in
            management.find_commands(path)]))

        path = os.path.realpath(os.path.join(
            yourlabs.__path__[0], 'management'))
        _commands.update([(name, 'yourlabs') for name in
            management.find_commands(path)])

        # Find the installed apps
        from django.conf import settings
        try:
            apps = settings.INSTALLED_APPS
        except management.ImproperlyConfigured:
            # Still useful for commands that do not require functional settings,
            # like startproject or help
            apps = []

        # Find and load the management module for each installed app.
        for app_name in apps:
            try:
                path = management.find_management_module(app_name)
                _commands.update(dict([(name, app_name)
                                       for name in management.find_commands(path)]))
            except ImportError:
                pass # No management module - ignore this app

    return _commands

management.get_commands = new_get_commands
management._commands = _commands

if __name__ == "__main__":
    management.execute_from_command_line()
